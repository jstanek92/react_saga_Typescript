import { createObjectComparer, invert } from "@utils";
import { FieldInfo } from "rd-redux-forms";
import * as React from "react";
import { compose, setDisplayName, shouldUpdate } from "recompose";

export interface FieldPlainProps {
    field?: FieldInfo;
    label: string;
    disabled?: boolean;
    className?: string;
    children?: React.ReactChild | React.ReactChild[];
}

export const FieldPlain = compose<{}, FieldPlainProps>(
    setDisplayName("FieldPlain"),
    shouldUpdate(
        invert(
            createObjectComparer({
                compareReactChildren: true,
                comparerName: "FieldPlain"
            })
        )
    )
)(function({ className, children, field, label }: FieldPlainProps) {
    const hasError = !!field && field.visualState === "invalid";
    return (
        <div className={className}>
            <label>{label}</label>
            {children}
            {hasError && (
                <span>
                    {(field.isParsed == false || field.hasCustomErrors) &&
                        field.errors[0]}
                </span>
            )}
        </div>
    );
});
